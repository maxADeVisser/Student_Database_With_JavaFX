DROP TABLE IF EXISTS Students;
DROP TABLE IF EXISTS Student_enrollments;
DROP TABLE IF EXISTS Grades;
DROP TABLE IF EXISTS Cities;
DROP TABLE IF EXISTS Courses;
DROP TABLE IF EXISTS Teachers;



CREATE TABLE IF NOT EXISTS Students(
    Student_ID TEXT not null PRIMARY KEY,
    Surname TEXT not null,
    Lastname TEXT not null,
    City_ID  TEXT not null,

    FOREIGN KEY (City_ID) REFERENCES Cities (City_ID)
);
INSERT INTO Students (Student_ID, Surname, Lastname, City_ID)
VALUES ('STUDENT-AIL', 'Aisha', 'Lincolm', 'CITY-NKBF'),
       ('STUDENT-AYN', 'Anya', 'Nielsen', 'CITY-NKBF'),
       ('STUDENT-AFJ', 'Alfred', 'Jensen', 'CITY-KLS'),
       ('STUDENT-BRB', 'Berta', 'Bertelsen', 'CITY-BILL'),
       ('STUDENT-ABA', 'Albert', 'Antonsen', 'CITY-SR'),
       ('STUDENT-EEK', 'Eske', 'Eriksen', 'CITY-EKS'),
       ('STUDENT-OFO', 'Olaf', 'Olesen', 'CITY-OD'),
       ('STUDENT-SLS', 'Salma', 'Simonsen', 'CITY-STH'),
       ('STUDENT-TTH', 'Theis', 'Thomasen', 'CITY-TØL'),
       ('STUDENT-JAJ', 'Janet', 'Jensen', 'CITY-JYL');



CREATE TABLE IF NOT EXISTS Cities(
    City_ID TEXT not null PRIMARY KEY,
    City_name TEXT not null,
    Postal_number INTEGER,
    Country_name TEXT not null
);
INSERT INTO Cities (City_ID, City_name, Postal_number, Country_name)
VALUES ('CITY-NKBF', 'Nykøbing F', 4800, 'Denmark'),
       ('CITY-KLS', 'Karlskrona', null, 'Sweden'),
       ('CITY-BILL', 'Billund', 7190, 'Denmark'),
       ('CITY-SR', 'Sorø', 4180, 'Denmark'),
       ('CITY-EKS', 'Eskildstrup', 4863, 'Denmark'),
       ('CITY-OD', 'Odense', 5000, 'Denmark'),
       ('CITY-STH', 'Stockholm', null, 'Sweden'),
       ('CITY-TØL', 'Tølløse', 4340, 'Denmark'),
       ('CITY-JYL', 'Jyllinge', 4040, 'Denmark');



CREATE TABLE IF NOT EXISTS Teachers(
    Teacher_ID TEXT not null PRIMARY KEY,
    Surname TEXT not null,
    Lastname TEXT not null
);
INSERT INTO Teachers (Teacher_ID, Surname, Lastname)
VALUES ('TEACHER-LN', 'Line', 'Reinhardt'),
       ('TEACHER-EB', 'Ebbe', 'Vang');



CREATE TABLE IF NOT EXISTS Courses(
    Course_ID TEXT not null PRIMARY KEY,
    Course_name TEXT not null,
    Teacher_ID TEXT not null,
    Year TEXT not null,
    Semester TEXT not null,

    FOREIGN KEY (Teacher_ID) REFERENCES Teachers (Teacher_ID)
);
INSERT INTO Courses (Course_ID, Course_name, Teacher_ID, Year, Semester)
VALUES ('COURSE-SD-AUTUM-2019-1', 'Software Development', 'TEACHER-LN', 2019, 'Autum'),
       ('COURSE-SD-SPRING-2020-1', 'Software Development', 'TEACHER-LN', 2020, 'Spring'),
       ('COURSE-ES1-AUTUM-2019-1', 'Essential Computing 1', 'TEACHER-EB', 2019, 'Autum');



CREATE TABLE IF NOT EXISTS Grades (
    Grade_ID TEXT not null PRIMARY KEY,
    Grade INTEGER
);
INSERT INTO Grades (Grade_ID, Grade)
VALUES ('no grade', null),
       ('-3', -3),
       ('00', 0),
       ('02', 2),
       ('4', 4),
       ('7', 7),
       ('10', 10),
       ('12', 12);



CREATE TABLE IF NOT EXISTS Student_enrollments(
    Enrollment_ID INTEGER PRIMARY KEY, -- bliver autogeneret af SQL
    Student_ID TEXT not null,
    Course_ID TEXT not null,
    Grade_ID TEXT not null,

    FOREIGN KEY (Student_ID) REFERENCES Students (Student_ID),
    FOREIGN KEY (Course_ID) REFERENCES Courses (Course_ID),
    FOREIGN KEY (Grade_ID) REFERENCES Grades (Grade_ID)
);
INSERT INTO Student_enrollments (Student_ID, Course_ID, Grade_ID) --OBS: SQL autogenerer enrollment_ID
VALUES ('STUDENT-AIL', 'COURSE-SD-AUTUM-2019-1', '12'),
       ('STUDENT-AIL', 'COURSE-ES1-AUTUM-2019-1', '10'),

       ('STUDENT-AYN', 'COURSE-SD-SPRING-2020-1', 'no grade'),
       ('STUDENT-AYN', 'COURSE-ES1-AUTUM-2019-1', '12'),

       ('STUDENT-AFJ', 'COURSE-SD-AUTUM-2019-1', '7'),
       ('STUDENT-AFJ', 'COURSE-ES1-AUTUM-2019-1', '10'),

       ('STUDENT-BRB', 'COURSE-SD-SPRING-2020-1', 'no grade'),
       ('STUDENT-BRB', 'COURSE-ES1-AUTUM-2019-1', '02'),

       ('STUDENT-ABA', 'COURSE-SD-AUTUM-2019-1', '10'),
       ('STUDENT-ABA', 'COURSE-ES1-AUTUM-2019-1', '7'),

       ('STUDENT-EEK', 'COURSE-SD-SPRING-2020', 'no grade'),
       ('STUDENT-EEK', 'COURSE-ES1-AUTUM-2019-1', '10'),

       ('STUDENT-OFO', 'COURSE-SD-AUTUM-2019-1', '4'),
       ('STUDENT-OFO', 'COURSE-ES1-AUTUM-2019-1', '12'),

       ('STUDENT-SLS', 'COURSE-SD-SPRING-2020-1', 'no grade'),
       ('STUDENT-SLS', 'COURSE-ES1-AUTUM-2019-1', '12'),

       ('STUDENT-TTH', 'COURSE-SD-AUTUM-2019-1', '12'),
       ('STUDENT-TTH', 'COURSE-ES1-AUTUM-2019-1', '12'),

       ('STUDENT-JAJ', 'COURSE-SD-SPRING-2020-1', 'no grade'),
       ('STUDENT-JAJ', 'COURSE-ES1-AUTUM-2019-1', '7');



--- ## SQL INJECTIONS ## ---



-- GETS COURSES TAKEN FOR A STUDENT AND THEIR GRADES
SELECT Course_name, Grade
FROM Student_enrollments
JOIN Grades
ON Student_enrollments.Grade_ID = Grades.Grade_ID
JOIN Courses
ON Student_enrollments.Course_ID = Courses.Course_ID
JOIN Students
ON Student_enrollments.Student_ID = Students.Student_ID WHERE Surname = 'Albert';


--- GETS THE AVERAGE GRADE FROM A STUDENT
SELECT Surname, avg(Grade)
FROM Student_enrollments
JOIN Grades
ON Student_enrollments.Grade_ID = Grades.Grade_ID
JOIN Students
ON Student_enrollments.Student_ID = Students.Student_ID WHERE Surname = 'Aisha';


--- GETS THE AVERAGE FOR A COURSE
SELECT Course_name, avg(Grade)
FROM Student_enrollments
JOIN Grades
ON Student_enrollments.Grade_ID = Grades.Grade_ID
JOIN Courses
ON Student_enrollments.Course_ID = Courses.Course_ID WHERE Course_name = 'Essential Computing 1'



